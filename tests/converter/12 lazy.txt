type Lazy a = a
foo : Lazy Int
foo = 1
-
Object [("foo",Function [] [Return (Lit (LitInt 1))])]
=
type Lazy a = a
foo : Lazy Int
foo = 1
bar = foo
-
Scope [Var "foo" (Function [] [Return (Lit (LitInt 1))])] (Object [("foo",Ident "foo"),("bar",Ident "foo")])
=
type Lazy a = a
foo : Lazy Int
foo = 1
bar : Int
bar = foo
-
Scope [Var "foo" (Function [] [Return (Lit (LitInt 1))])] (Object [("foo",Ident "foo"),("bar",Call (Ident "foo") [])])
=
type Lazy a = a
foo : Int => Lazy Int
foo x = x
-
Object [("foo",Function ["x"] [Return (Function [] [Return (Ident "x")])])]