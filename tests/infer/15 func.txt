type Foo a = a
foo : ((Foo a) => (Foo a))
foo x = x
foo 1
foo 1.0
-
TypeApply (TypeIdent "Foo") [TypeIdent "Double"]
=
compose f g x = f (g x)
-
TypeLabel "compose" (TypeFunc (TypeRecord [TypeFunc (TypeVar "b") (TypeVar "c"),TypeFunc (TypeVar "a") (TypeVar "b"),TypeVar "a"]) (TypeVar "c"))
=
ffi eq : (Int, Int) => Bool
foo x = x # case (1 => 2)
-
TypeLabel "foo" (TypeFunc (TypeIdent "Int") (TypeIdent "Int"))
=
foo : Int => Int
foo x = x
-
TypeLabel "foo" (TypeFunc (TypeIdent "Int") (TypeIdent "Int"))
=
ffi bar : Int => Int
foo x = bar x
-
TypeLabel "foo" (TypeFunc (TypeIdent "Int") (TypeIdent "Int"))
=
ffi eq : (Int, Int) => Bool
1 => 2
-
TypeFunc (TypeIdent "Int") (TypeIdent "Int")
=
ffi eq : (Int, Int) => Bool
1 => 2
2 => 3
-
TypeFunc (TypeIdent "Int") (TypeIdent "Int")
=
x = 1
y => y x
-
TypeFunc (TypeFunc (TypeIdent "Int") (TypeVar "a")) (TypeVar "a")
=
x y => x
-
TypeFunc (TypeRecord [TypeVar "a",TypeVar "b"]) (TypeVar "a")
=
equal x y => equal x y
-
TypeFunc (TypeRecord [TypeFunc (TypeRecord [TypeVar "a",TypeVar "b"]) (TypeVar "c"),TypeVar "a",TypeVar "b"]) (TypeVar "c")
=
\(equal : (a, a => Int), x, y) => equal x y
-
TypeFunc (TypeRecord [TypeFunc (TypeRecord [TypeVar "a",TypeVar "a"]) (TypeIdent "Int"),TypeVar "a",TypeVar "a"]) (TypeIdent "Int")
=
\(x : Int) => x
-
TypeFunc (TypeIdent "Int") (TypeIdent "Int")
=
ffi foo : Int => Int
\(x : Unit) => foo x
-
(UnificationFail (TypeIdent "Unit") (TypeIdent "Int"),(2,16,""))
=
ffi foo : (x : xType) => xType
ffi bar : (y : yType) => yType
\x => foo (bar x)
-
TypeFunc (TypeLabel "y" (TypeLabel "x" (TypeVar "a"))) (TypeVar "a")
=
ffi eq : (a,a) => Int
test x = eq x 1
-
TypeLabel "test" (TypeFunc (TypeIdent "Int") (TypeIdent "Int"))
=
ffi foo : Int => Bool
x | (foo x) => x
-
TypeFunc (TypeIdent "Int") (TypeIdent "Int")