ffi foo : (Int | Unit) => Int
foo 1
-
TypeIdent "Int"
=
ffi foo : Int => Int
ffi x : (Int | Unit)
foo x
-
(UnificationFail (TypeUnion [TypeIdent "Int",TypeIdent "Unit"]) (TypeIdent "Int"),(3,1,""))
=
ffi foo : (Int | Unit | String)
bar : (Int | Unit)
bar = foo
-
(UnificationFail (TypeIdent "String") (TypeUnion [TypeIdent "Int",TypeIdent "Unit"]),(2,1,""))
=
ffi foo : (Int | Unit)
bar : (Int | Unit | String)
bar = foo
-
TypeLabel "bar" (TypeUnion [TypeIdent "Int",TypeIdent "Unit",TypeIdent "String"])
=
foo = case (\(x : Int) => 2) (_ => 3)
foo 1
-
TypeIdent "Int"