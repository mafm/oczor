ffi unit : Unit
type None = Unit
none : None
none = unit
type Maybe a = None | a 

maybe : (b, (a => b), (Maybe a)) => b
maybe x f m = m # case 
 (z : None) => x
 z => f z

foo = maybe 1 (x => 2) none
-
TypeLabel "foo" (TypeIdent "Int")
=
ffi emptyObject : a
ffi eqAny : a, a => Bool
ffi andBool : Bool, Bool => Bool
class eq a : a, a => Bool
type Maybe a = none | just : a 
eqMaybe : (a eq <: (Maybe a, Maybe a)) => Bool
eqMaybe = case
 ^none ^none => true
 x y => eq x.just y.just
-
TypeLabel "eqMaybe" (TypeFunc (TypeConstraints [(TypeVar "a","eq")] (TypeRecord [TypeApply (TypeIdent "Maybe") [TypeVar "a"],TypeApply (TypeIdent "Maybe") [TypeVar "a"]])) (TypeIdent "Bool"))
=
ffi emptyObject : a
ffi eqAny : a, a => Bool
ffi andBool : Bool, Bool => Bool
class eq a : a, a => Bool
type Maybe a = none | just : a 

maybe : b, (a => b), (Maybe a) => b
maybe x f m = m # case 
 ^none => x
 z => f z.just

noneMaybe : Maybe a
noneMaybe = none

mapMaybe : (a => b, (Maybe a)) => Maybe b
mapMaybe f x = maybe noneMaybe (y => just = (f y)) x
-
TypeLabel "mapMaybe" (TypeFunc (TypeRecord [TypeFunc (TypeVar "a") (TypeVar "b"),TypeApply (TypeIdent "Maybe") [TypeVar "a"]]) (TypeApply (TypeIdent "Maybe") [TypeVar "b"]))
