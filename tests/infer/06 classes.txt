class mempty a: a
foo = mempty
-
TypeLabel "foo" (TypeConstraints [(TypeVar "a","mempty")] (TypeVar "a"))
=
class mempty a: a
instance Int mempty = 0
test : Int
test = mempty
-
TypeLabel "test" (TypeIdent "Int")
=
class mempty a: a
x : Int
 x = mempty
-
(NoInstance (TypeIdent "Int") "mempty",(2,1,""))
=
class mempty a: a
instance Int mempty = 0
type Foo = Int
x : Foo
 x = mempty
-
TypeLabel "x" (TypeIdent "Foo")
=
class show s: s => Unit
-
NoType
=
class show s: s => Unit
foo x = show x
-
TypeLabel "foo" (TypeFunc (TypeConstraints [(TypeVar "a","show")] (TypeVar "a")) (TypeIdent "Unit"))
=
class show s: s => Unit
show 1
-
(NoInstance (TypeIdent "Int") "show",(2,1,""))
=
class show s: s => Unit
ffi showInt : Int => Unit
instance Int show x = showInt x
show(1)
-
TypeIdent "Unit"
=
type Foo a = Int
class bar f : (f a) => Int
instance Foo bar (x : Foo a) = 1
x : Foo Int
x = 1
test = bar x
-
TypeLabel "test" (TypeIdent "Int")
=
class mempty a: a
instance Int mempty = 0
type Foo a = foo : a
instance (Foo (a mempty <: a)) mempty = (foo = mempty)
x : Foo Int
x = mempty
-
TypeLabel "x" (TypeApply (TypeIdent "Foo") [TypeIdent "Int"])
=
class mempty a: a
instance Int mempty = 0
type Foo a = foo : a
instance (Foo (a mempty <: a)) mempty = (foo = mempty)
x : Foo Double
x = mempty
-
(NoInstance (TypeApply (TypeIdent "Foo") [TypeIdent "Double"]) "mempty",(5,1,""))
=
type Foo a = (foo : a)
fooMap : ((a => b), Foo a) => Foo b
fooMap f x = foo = f (x.foo)
-
TypeLabel "fooMap" (TypeFunc (TypeRecord [TypeFunc (TypeVar "a") (TypeVar "b"),TypeApply (TypeIdent "Foo") [TypeVar "a"]]) (TypeApply (TypeIdent "Foo") [TypeVar "b"]))