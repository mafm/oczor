ffi eq : (Int, Int) => Bool
case (1 => 2) (2 => 3)
-
TypeFunc (TypeIdent "Int") (TypeIdent "Int")
=
case (\(z : Int) => 1) (\(z : Unit) => 2)
-
TypeFunc (TypeUnion [TypeIdent "Int",TypeIdent "Unit"]) (TypeIdent "Int")
=
ffi eq : (Int, Int) => Bool
foo = case (\1 => 2) (\2 => 3)
foo 1
-
TypeIdent "Int"
=
ffi eq : (Int, Int) => Bool
foo = case (\1 => 2) (\2 => 3)
-
TypeLabel "foo" (TypeFunc (TypeIdent "Int") (TypeIdent "Int"))
=
foo = case (\(x : Int) => 1) (\(y : Unit) => 2)
-
TypeLabel "foo" (TypeFunc (TypeUnion [TypeIdent "Int",TypeIdent "Unit"]) (TypeIdent "Int"))