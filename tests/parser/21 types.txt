type Foo = y : Int
x : Foo
x = y = 1
-
Record [TypeDecl "Foo" (TypeLabel "y" (TypeIdent "Int")),RecordLabel "x" (WithType (RecordLabel "y" (Lit (LitInt 1))) (TypeIdent "Foo"))]
=
type Foo = Int
-
TypeDecl "Foo" (TypeIdent "Int")
=
type Foo = Foo | Bar
-
TypeDecl "Foo" (TypeUnion [TypeIdent "Foo",TypeIdent "Bar"])
=
foo : x
-
ExprType (TypeLabel "foo" (TypeVar "x"))
=
foo : x => x
-
ExprType (TypeLabel "foo" (TypeFunc (TypeVar "x") (TypeVar "x")))
=
foo : Int => Int
-
ExprType (TypeLabel "foo" (TypeFunc (TypeIdent "Int") (TypeIdent "Int")))
=
foo : (foo : Int, bar : Int)
-
ExprType (TypeLabel "foo" (TypeRecord [TypeLabel "foo" (TypeIdent "Int"),TypeLabel "bar" (TypeIdent "Int")]))
=
foo : Int, Int => Int
-
ExprType (TypeLabel "foo" (TypeFunc (TypeRecord [TypeIdent "Int",TypeIdent "Int"]) (TypeIdent "Int")))