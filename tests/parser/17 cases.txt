case (x => 1) (y => 1)
-
Cases [Function (ParamIdent "x") Nothing (Lit (LitInt 1)),Function (ParamIdent "y") Nothing (Lit (LitInt 1))]
=
case (x => 1)
-
Cases [Function (ParamIdent "x") Nothing (Lit (LitInt 1))]
=
case (\x | (1) => 1)
-
Cases [Function (ParamIdent "x") (Just (Lit (LitInt 1))) (Lit (LitInt 1))]
=
case (\x => 1) (\y => 2)
-
Cases [Function (ParamIdent "x") Nothing (Lit (LitInt 1)),Function (ParamIdent "y") Nothing (Lit (LitInt 2))]
=
foo = case
 x y => 2
 z => 2
-
RecordLabel "foo" (Cases [Function (ParamIdent "_a") Nothing (Let (Record [RecordLabel "x" (Call (LabelAccess "item1") (Ident "_a")),RecordLabel "y" (Call (LabelAccess "item2") (Ident "_a"))]) (Lit (LitInt 2))),Function (ParamIdent "z") Nothing (Lit (LitInt 2))])
=
ffi eqInt : (Int, Int) => Bool
foo = case
 x y | (eqInt x 1) => 2
 z => 2
-
Record [Ffi "eqInt" (TypeFunc (TypeRecord [TypeIdent "Int",TypeIdent "Int"]) (TypeIdent "Bool")),RecordLabel "foo" (Cases [Function (ParamIdent "_a") (Just (Let (Record [RecordLabel "x" (Call (LabelAccess "item1") (Ident "_a")),RecordLabel "y" (Call (LabelAccess "item2") (Ident "_a"))]) (Call (Ident "eqInt") (Record [Ident "x",Lit (LitInt 1)])))) (Let (Record [RecordLabel "x" (Call (LabelAccess "item1") (Ident "_a")),RecordLabel "y" (Call (LabelAccess "item2") (Ident "_a"))]) (Lit (LitInt 2))),Function (ParamIdent "z") Nothing (Lit (LitInt 2))])]